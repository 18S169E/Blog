[{"categories":null,"content":" Neovim 配置文档","date":"2024-08-31","objectID":"/neovim-config/:0:0","series":null,"tags":null,"title":"Neovim Config","uri":"/neovim-config/#neovim-配置文档"},{"categories":null,"content":" 1 1. 插件管理使用 lazy.nvim 进行插件管理。lazy.nvim 是一个高效的插件管理器，能够按需加载插件。 text lua复制代码-- ~/.config/nvim/lua/config/lazy.lua return { -- 插件列表 { 'nvim-treesitter/nvim-treesitter', -- Treesitter 插件 run = ':TSUpdate', -- 安装后更新 Treesitter }, { 'neovim/nvim-lspconfig', -- LSP 配置 config = function() require'lspconfig'.pyright.setup{} -- Python LSP end, }, -- 其他插件配置... } ","date":"2024-08-31","objectID":"/neovim-config/:1:0","series":null,"tags":null,"title":"Neovim Config","uri":"/neovim-config/#1-插件管理"},{"categories":null,"content":" 2 2. 配置文件结构Neovim 的配置文件结构分为以下几个主要部分： text lua复制代码-- ~/.config/nvim/init.lua -- 初始化配置 require('config.lazy') -- 插件管理 require('config.keymaps') -- 键位映射 require('config.settings') -- 常规设置 require('config.autocmds') -- 自动命令 ","date":"2024-08-31","objectID":"/neovim-config/:2:0","series":null,"tags":null,"title":"Neovim Config","uri":"/neovim-config/#2-配置文件结构"},{"categories":null,"content":" 3 3. 键位映射定义了自定义的快捷键映射，以提高操作效率。以下是一个示例配置： text lua复制代码-- ~/.config/nvim/lua/config/keymaps.lua vim.api.nvim_set_keymap('n', '\u003cLeader\u003eq', ':wq\u003cCR\u003e', { noremap = true, silent = true }) vim.api.nvim_set_keymap('n', '\u003cLeader\u003es', ':w\u003cCR\u003e', { noremap = true, silent = true }) -- 将 y 键映射到 Ctrl+c vim.api.nvim_set_keymap('n', 'y', '\u003cC-c\u003e', { noremap = true, silent = true }) ","date":"2024-08-31","objectID":"/neovim-config/:3:0","series":null,"tags":null,"title":"Neovim Config","uri":"/neovim-config/#3-键位映射"},{"categories":null,"content":" 4 4. 常规设置设置 Neovim 的常规行为和界面选项，例如光标形状和行号显示。 text lua复制代码-- ~/.config/nvim/lua/config/settings.lua vim.o.number = true -- 显示行号 vim.o.relativenumber = true -- 相对行号 vim.o.cursorline = true -- 高亮当前行 vim.o.mouse = 'a' -- 启用鼠标支持 -- 光标样式 vim.o.guicursor = 'n-v-c:block,i-ci-ve:ver25,r-cr-o:hor20' ","date":"2024-08-31","objectID":"/neovim-config/:4:0","series":null,"tags":null,"title":"Neovim Config","uri":"/neovim-config/#4-常规设置"},{"categories":null,"content":" 5 5. 自动命令配置自动命令以在特定事件发生时执行自定义操作。例如，保存时自动修复文件： text lua复制代码-- ~/.config/nvim/lua/config/autocmds.lua vim.api.nvim_create_autocmd(\"BufWritePre\", { pattern = \"*\", command = \"lua vim.lsp.buf.formatting_sync()\", }) ","date":"2024-08-31","objectID":"/neovim-config/:5:0","series":null,"tags":null,"title":"Neovim Config","uri":"/neovim-config/#5-自动命令"},{"categories":null,"content":" 6 6. 插件特定配置为特定插件设置配置选项。例如，配置 markdown-preview.nvim 插件来在 WSL 中打开预览。 text lua复制代码-- ~/.config/nvim/lua/config/markdown-preview.lua return { \"iamcco/markdown-preview.nvim\", cmd = { \"MarkdownPreviewToggle\", \"MarkdownPreview\", \"MarkdownPreviewStop\" }, ft = { \"markdown\" }, build = function(plugin) if vim.fn.executable \"npx\" then vim.cmd(\"!cd \" .. plugin.dir .. \" \u0026\u0026 cd app \u0026\u0026 npx --yes yarn install\") else vim.cmd [[Lazy load markdown-preview.nvim]] vim.fn[\"mkdp#util#install\"]() end end, init = function() vim.g.mkdp_open_to_the_world = 1 vim.g.mkdp_browser = 'wslview' end, } ","date":"2024-08-31","objectID":"/neovim-config/:6:0","series":null,"tags":null,"title":"Neovim Config","uri":"/neovim-config/#6-插件特定配置"},{"categories":null,"content":" 7 7. 主题和外观配置 Neovim 的外观，包括主题设置和状态栏配置。 text lua复制代码-- ~/.config/nvim/lua/config/theme.lua vim.cmd [[colorscheme gruvbox]] vim.o.background = \"dark\" -- 状态栏配置 require('lualine').setup { options = { theme = 'gruvbox' } } ","date":"2024-08-31","objectID":"/neovim-config/:7:0","series":null,"tags":null,"title":"Neovim Config","uri":"/neovim-config/#7-主题和外观"},{"categories":null,"content":"this only for test ","date":"2024-08-31","objectID":"/test/:0:0","series":null,"tags":null,"title":"Test","uri":"/test/#"},{"categories":null,"content":" 创建个人博客","date":"2024-08-31","objectID":"/create_site/:0:0","series":null,"tags":null,"title":"Create-Site","uri":"/create_site/#创建个人博客"},{"categories":null,"content":" 使用工具：Hugo：DoIt主题。GitHub Pages。教程链接：https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/。 创建基础框架和发布的内容都有详细讲解。 虽然这时候已经有了初始框架，但是实在过于start from the scratch。所以我想找一个别人在这个框架实现的模板上在修改，事实上，作者给了这么一个模板。位于：DoIt/exampleSite/config/_default下。然后修改配置文件的结构：https://gohugo.io/getting-started/configuration/。 发现原理是config和DoIt框架共同配合工作的。 通过在本地添加文件实现了头像的显示。 ","date":"2024-08-31","objectID":"/create_site/:0:0","series":null,"tags":null,"title":"Create-Site","uri":"/create_site/#使用工具hugodoit主题github-pages"}]